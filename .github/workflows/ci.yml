name: GeneWeb CI
on:
  workflow_dispatch:
  pull_request:
    branches:
      - master
    paths-ignore:
      - 'etc/**'
      - 'hd/**'
      - 'man/**'
      - '**/*.md'
      - 'geneweb_colab.ipynb'
      - 'ICHANGES'
      - 'INSTALL'
      - 'LICENSE'
      - 'CHANGES'
      - '.gitattributes'
      - '.gitignore'
      - '.git-blame-ignore-revs'
      - '.ocamlformat'
      - '.ocamlformat-ignore'
      - 'geneweb.iss'
      - 'geneweb.opam.template'
  push:
    branches:
      - master
    paths-ignore:
      - 'etc/**'
      - 'hd/**'
      - 'man/**'
      - '**/*.md'
      - 'geneweb_colab.ipynb'
      - 'ICHANGES'
      - 'INSTALL'
      - 'LICENSE'
      - 'CHANGES'
      - '.gitattributes'
      - '.gitignore'
      - '.git-blame-ignore-revs'
      - '.ocamlformat'
      - '.ocamlformat-ignore'
      - 'geneweb.iss'
      - 'geneweb.opam.template'

env:
  OPAMYES: true

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-24.04, macos-15, windows-latest]
        ocaml-compiler: [4.14.2, 5.3.0]
        setup-version: [v3]
        include:
          - os: ubuntu-22.04
            ocaml-compiler: 4.08.1
            setup-version: v2
          - os: macos-13
            ocaml-compiler: 4.08.1
            setup-version: v2
          - os: windows-latest
            ocaml-compiler: 4.08.1
            setup-version: v2

    outputs:
      total_matrix_jobs: ${{ strategy.job-total || 0 }}
      metric: ${{ steps.collect-metrics.outputs.metric }}

    env:
      FMT_CI: ${{ matrix.os == 'ubuntu-24.04' && matrix.ocaml-compiler == '4.14.2' && matrix.setup-version == 'v3' }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Start Build Timer
        uses: ./.github/actions/ci-utils
        with:
          command: start-timer

      - name: Cache Opam dependencies (Unix)
        id: cache-opam-unix
        if: runner.os != 'Windows'
        uses: actions/cache@v4
        with:
          path: ~/.opam
          key: unix-${{ matrix.ocaml-compiler }}-${{ env.FMT_CI == 'true' && 'with-test' || 'no-test' }}-${{ matrix.setup-version }}-${{ hashFiles('*.opam') }}-cache
          restore-keys: unix-${{ matrix.ocaml-compiler }}-${{ env.FMT_CI == 'true' && 'with-test' || 'no-test' }}-${{ matrix.setup-version }}

      - name: Cache Opam dependencies (Windows)
        id: cache-opam-windows
        if: runner.os == 'Windows'
        uses: actions/cache@v4
        with:
          path: D:\.opam
          key: windows-${{ matrix.ocaml-compiler }}-${{ env.FMT_CI == 'true' && 'with-test' || 'no-test' }}-${{ matrix.setup-version }}-${{ hashFiles('*.opam') }}-cache
          restore-keys: windows-${{ matrix.ocaml-compiler }}-${{ env.FMT_CI == 'true' && 'with-test' || 'no-test' }}-${{ matrix.setup-version }}

      - name: Setup Ocaml with v2
        if: matrix.setup-version == 'v2'
        uses: ocaml/setup-ocaml@v2
        with:
          ocaml-compiler: ${{ matrix.ocaml-compiler }}
          
      - name: Setup Ocaml with v3
        if: matrix.setup-version == 'v3'
        uses: ocaml/setup-ocaml@v3
        with:
          ocaml-compiler: ${{ matrix.ocaml-compiler }}

      - name: Pin camlp5 and not-ocamlfind without installing
        if: matrix.setup-version == 'v3'
        run: |
          opam pin add --no-action camlp5 https://github.com/camlp5/camlp5.git
          opam pin add --no-action not-ocamlfind https://github.com/chetmurthy/not-ocamlfind.git
          opam pin add --no-action camlp5-buildscripts https://github.com/camlp5/camlp5-buildscripts.git

      - name: Install Geneweb dependencies
        run: |
          opam install . --deps-only ${{ env.FMT_CI == 'true' && '--with-test' || '' }}

      - name: Install ancient dependency for Unix
        if: ${{ runner.os != 'Windows' }}
        run: opam pin ancient https://github.com/OCamlPro/ocaml-ancient.git

      - name: Run Camlp5 test suite on Unix V3
        if: runner.os != 'Windows' && matrix.setup-version == 'v3'
        run: |
          # Ensure OPAM environment is properly set up
          eval $(opam env)
          
          echo "==== Environment Info ===="
          echo "OCaml version: $(ocaml -version)"
          echo "OPAM version: $(opam --version)"
          echo "OPAM switch: $(opam switch show)"
          echo "=========================="
          
          echo "===== UNIX V3 PATH DETECTION ====="
          
          # Get OPAM prefix
          OPAM_PREFIX=$(opam var prefix)
          echo "OPAM prefix: $OPAM_PREFIX"
          
          # Find camlp5 directory
          CAMLP5_DIR=$(find "$OPAM_PREFIX/.opam-switch/build" -type d -name "camlp5.*" 2>/dev/null | sort -V | tail -n 1)
          
          if [ -d "$CAMLP5_DIR" ] && [ -d "$CAMLP5_DIR/testsuite" ]; then
            echo "Found Camlp5 directory: $CAMLP5_DIR"
            
            echo "Running Camlp5 test suite on Unix v3..."
            cd "$CAMLP5_DIR/testsuite"
            
            echo "===== BEGIN TEST OUTPUT ====="
            make -k all-tests || echo "Tests completed with some errors, but continuing build"
            echo "===== END TEST OUTPUT ====="
          else
            echo "Camlp5 testsuite directory not found"
            echo "Available Camlp5 directories:"
            find "$OPAM_PREFIX" -name "camlp5*" -type d | grep -v "lib"
            echo "Skipping tests for Unix v3"
          fi
        shell: bash
        continue-on-error: true

      - name: Install dependencies for v2 test environments
        if: matrix.setup-version == 'v2'
        run: opam install pcre
        continue-on-error: true

      - name: Run Camlp5 test suite on Windows V3
        if: runner.os == 'Windows' && matrix.setup-version == 'v3'
        run: |
          # Ensure OPAM environment is properly set up
          eval $(opam env)
          
          echo "==== Environment Info ===="
          echo "OCaml version: $(ocaml -version 2>/dev/null || echo 'Not found')"
          echo "OPAM version: $(opam --version)"
          echo "OPAM switch: $(opam switch show)"
          echo "=========================="
          
          # Find buildscripts directory - use a path we know works with Windows/bash
          BUILDSCRIPTS_DIR="D:/a/geneweb/geneweb/_opam/lib/camlp5-buildscripts"
          echo "Buildscripts directory: $BUILDSCRIPTS_DIR"
          
          # Create non-.exe wrapper
          if [ -d "$BUILDSCRIPTS_DIR" ] && [ -f "$BUILDSCRIPTS_DIR/LAUNCH.exe" ]; then
            echo "Creating LAUNCH wrapper script..."
            echo '#!/bin/bash' > "$BUILDSCRIPTS_DIR/LAUNCH"
            echo 'script_dir=$(dirname "$0")' >> "$BUILDSCRIPTS_DIR/LAUNCH"
            echo '"$script_dir/LAUNCH.exe" "$@"' >> "$BUILDSCRIPTS_DIR/LAUNCH"
            chmod +x "$BUILDSCRIPTS_DIR/LAUNCH"
            
            echo "Wrapper created. Contents:"
            cat "$BUILDSCRIPTS_DIR/LAUNCH"
            
            # Find Camlp5 build directory
            CAMLP5_DIR=$(find "D:/a/geneweb/geneweb/_opam/.opam-switch/build" -type d -name "camlp5.*" | sort -V | tail -n 1)
            
            if [ -d "$CAMLP5_DIR/testsuite" ]; then
              echo "Running tests in $CAMLP5_DIR/testsuite"
              cd "$CAMLP5_DIR/testsuite"
              
              # Show current PATH for debugging
              echo "PATH: $PATH"
              echo "OCAMLPATH: $OCAMLPATH"
              
              # Try running tests
              echo "===== BEGIN TEST OUTPUT ====="
              # Try a single target first
              make tools/ROUNDTRIP-pa_r-pr_r.byte || echo "First target failed"
              # Then try all tests
              make all-tests || echo "Tests completed with errors"
              echo "===== END TEST OUTPUT ====="
            else
              echo "Camlp5 testsuite directory not found"
            fi
          else
            echo "LAUNCH.exe not found in $BUILDSCRIPTS_DIR"
            ls -la "$BUILDSCRIPTS_DIR"
          fi
        shell: bash
        continue-on-error: true

      - name: Configure
        run: opam exec -- ocaml ./configure.ml --sosa-zarith

      - name: Build Geneweb
        run: opam exec -- make ${{ env.FMT_CI == 'true' && 'fmt ci' || 'build' }} distrib

      - name: "Test Geneweb daemon with --cache-in-memory"
        if: ${{ runner.os != 'Windows' }}
        run: |
          output=$(distribution/gw/gwd -cache-in-memory testing 2>&1)
          if echo "$output" | grep -q "Caching database testing in memory"; then
            echo "Caching message found, test passed."
            exit 0
          else
            echo "Caching message not found, test failed."
            exit 1
          fi

      - name: Collect Build Metrics
        id: collect-metrics
        uses: ./.github/actions/ci-utils
        with:
          command: collect-metrics
          os: ${{ matrix.os }}
          ocaml-version: ${{ matrix.ocaml-compiler }}
          cache-hit: ${{ runner.os != 'Windows' && steps.cache-opam-unix.outputs.cache-hit || steps.cache-opam-windows.outputs.cache-hit }}

  build-results:
    needs: [build]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Generate Build Summary
        uses: ./.github/actions/ci-utils
        with:
          command: generate-summary
          total-builds: ${{ needs.build.outputs.total_matrix_jobs }}
