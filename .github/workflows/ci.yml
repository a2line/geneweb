name: GeneWeb CI
on:
  workflow_dispatch:
  pull_request:
    branches:
      - master
    paths-ignore:
      - 'etc/**'
      - 'hd/**'
      - 'man/**'
      - '**/*.md'
      - 'geneweb_colab.ipynb'
      - 'ICHANGES'
      - 'INSTALL'
      - 'LICENSE'
      - 'CHANGES'
      - '.gitattributes'
      - '.gitignore'
      - '.git-blame-ignore-revs'
      - '.ocamlformat'
      - '.ocamlformat-ignore'
      - 'geneweb.iss'
      - 'geneweb.opam.template'
  push:
    branches:
      - master
    paths-ignore:
      - 'etc/**'
      - 'hd/**'
      - 'man/**'
      - '**/*.md'
      - 'geneweb_colab.ipynb'
      - 'ICHANGES'
      - 'INSTALL'
      - 'LICENSE'
      - 'CHANGES'
      - '.gitattributes'
      - '.gitignore'
      - '.git-blame-ignore-revs'
      - '.ocamlformat'
      - '.ocamlformat-ignore'
      - 'geneweb.iss'
      - 'geneweb.opam.template'

env:
  OPAMYES: true

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-24.04, macos-15, windows-latest]
        ocaml-compiler: [4.14.2, 5.3.0]
        setup-version: [v3]
        include:
          - os: ubuntu-22.04
            ocaml-compiler: 4.08.1
            setup-version: v2
          - os: macos-13
            ocaml-compiler: 4.08.1
            setup-version: v2
          - os: windows-latest
            ocaml-compiler: 4.08.1
            setup-version: v2

    outputs:
      total_matrix_jobs: ${{ strategy.job-total || 0 }}
      metric: ${{ steps.collect-metrics.outputs.metric }}

    env:
      FMT_CI: ${{ matrix.os == 'ubuntu-24.04' && matrix.ocaml-compiler == '4.14.2' && matrix.setup-version == 'v3' }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Start Build Timer
        uses: ./.github/actions/ci-utils
        with:
          command: start-timer

      - name: Cache Opam dependencies (Unix)
        id: cache-opam-unix
        if: runner.os != 'Windows'
        uses: actions/cache@v4
        with:
          path: ~/.opam
          key: unix-${{ matrix.ocaml-compiler }}-${{ env.FMT_CI == 'true' && 'with-test' || 'no-test' }}-${{ matrix.setup-version }}-${{ hashFiles('*.opam') }}-cache
          restore-keys: unix-${{ matrix.ocaml-compiler }}-${{ env.FMT_CI == 'true' && 'with-test' || 'no-test' }}-${{ matrix.setup-version }}

      - name: Cache Opam dependencies (Windows)
        id: cache-opam-windows
        if: runner.os == 'Windows'
        uses: actions/cache@v4
        with:
          path: D:\.opam
          key: windows-${{ matrix.ocaml-compiler }}-${{ env.FMT_CI == 'true' && 'with-test' || 'no-test' }}-${{ matrix.setup-version }}-${{ hashFiles('*.opam') }}-cache
          restore-keys: windows-${{ matrix.ocaml-compiler }}-${{ env.FMT_CI == 'true' && 'with-test' || 'no-test' }}-${{ matrix.setup-version }}

      - name: Setup Ocaml with v2
        if: matrix.setup-version == 'v2'
        uses: ocaml/setup-ocaml@v2
        with:
          ocaml-compiler: ${{ matrix.ocaml-compiler }}
          
      - name: Setup Ocaml with v3
        if: matrix.setup-version == 'v3'
        uses: ocaml/setup-ocaml@v3
        with:
          ocaml-compiler: ${{ matrix.ocaml-compiler }}

      - name: Pin camlp5 and not-ocamlfind without installing
        if: matrix.setup-version == 'v3'
        run: |
          opam pin add --no-action camlp5 https://github.com/camlp5/camlp5.git
          opam pin add --no-action not-ocamlfind https://github.com/chetmurthy/not-ocamlfind.git
          opam pin add --no-action camlp5-buildscripts https://github.com/camlp5/camlp5-buildscripts.git

      - name: Install Geneweb dependencies
        run: |
          opam install . --deps-only ${{ env.FMT_CI == 'true' && '--with-test' || '' }}

      - name: Install ancient dependency for Unix
        if: ${{ runner.os != 'Windows' }}
        run: opam pin ancient https://github.com/OCamlPro/ocaml-ancient.git

      - name: Install dependencies for v2 test environments
        if: matrix.setup-version == 'v2'
        run: opam install pcre
        continue-on-error: true

      - name: Run Camlp5 test suite
        run: |
          # Ensure OPAM environment is properly set up
          eval $(opam env)
          
          echo "==== Environment Info ===="
          echo "OCaml version: $(ocaml -version 2>/dev/null || echo 'Not found')"
          echo "OPAM version: $(opam --version)"
          echo "OPAM switch: $(opam switch show)"
          echo "OS: $RUNNER_OS"
          echo "Setup version: ${{ matrix.setup-version }}"
          echo "=========================="
          
          # WINDOWS-SPECIFIC APPROACH
          if [ "$RUNNER_OS" == "Windows" ]; then
            echo "===== WINDOWS PATH DETECTION ====="
            
            # Check for ocamlfind
            which ocamlfind || echo "WARNING: ocamlfind not found in PATH"
            
            # Find camlp5 directory
            CAMLP5_BUILD_DIR=$(find "D:\a\geneweb\geneweb\_opam\.opam-switch\build" -type d -name "camlp5.*" | sort -V | tail -n 1)
            
            if [ -d "$CAMLP5_BUILD_DIR" ] && [ -d "$CAMLP5_BUILD_DIR/testsuite" ]; then
              echo "Found Camlp5 build directory: $CAMLP5_BUILD_DIR"
              
              # Fix the LAUNCH script issue - directly use the path we found
              echo "Fixing LAUNCH script issue..."
              
              # We know the buildscripts directory exists
              BUILDSCRIPTS_DIR="D:\a\geneweb\geneweb\_opam\lib\camlp5-buildscripts"
              echo "Buildscripts directory: $BUILDSCRIPTS_DIR"
              
              if [ -d "$BUILDSCRIPTS_DIR" ]; then
                echo "Contents of buildscripts directory:"
                ls -la "$BUILDSCRIPTS_DIR"
                
                # Check if LAUNCH.exe exists
                if [ -f "$BUILDSCRIPTS_DIR/LAUNCH.exe" ]; then
                  echo "LAUNCH.exe found!"
                  
                  # Create a non-.exe version of LAUNCH
                  echo "Creating non-.exe version of LAUNCH..."
                  echo '#!/bin/bash' > "$BUILDSCRIPTS_DIR/LAUNCH"
                  echo "\"$BUILDSCRIPTS_DIR/LAUNCH.exe\" \"\$@\"" >> "$BUILDSCRIPTS_DIR/LAUNCH"
                  chmod +x "$BUILDSCRIPTS_DIR/LAUNCH"
                  
                  echo "LAUNCH script created:"
                  ls -la "$BUILDSCRIPTS_DIR/LAUNCH"
                  
                  # Now let's try running the tests
                  echo "Changing to testsuite directory..."
                  cd "$CAMLP5_BUILD_DIR/testsuite"
                  
                  echo "Running Camlp5 test suite..."
                  echo "===== BEGIN TEST OUTPUT ====="
                  # Run a simple target to test
                  make tools/ROUNDTRIP-pa_r-pr_r.byte || echo "First target failed, trying with all-tests"
                  make all-tests || echo "Tests completed with some errors, but continuing build"
                  echo "===== END TEST OUTPUT ====="
                else
                  echo "LAUNCH.exe not found in buildscripts directory"
                  echo "Skipping tests for Windows"
                fi
              else
                echo "Buildscripts directory not found"
                echo "Skipping tests for Windows"
              fi
            else
              echo "Camlp5 testsuite directory not found"
              echo "Skipping tests for Windows"
            fi
          # UNIX APPROACH - keep unchanged
          elif [ "$RUNNER_OS" != "Windows" ] && [ "${{ matrix.setup-version }}" == "v3" ]; then
            echo "===== UNIX PATH DETECTION ====="
            
            # Get OPAM prefix
            OPAM_PREFIX=$(opam var prefix)
            echo "OPAM prefix: $OPAM_PREFIX"
            
            # Find camlp5 directory
            CAMLP5_DIR=$(find "$OPAM_PREFIX/.opam-switch/build" -type d -name "camlp5.*" 2>/dev/null | sort -V | tail -n 1)
            
            if [ -d "$CAMLP5_DIR" ] && [ -d "$CAMLP5_DIR/testsuite" ]; then
              echo "Found Camlp5 directory: $CAMLP5_DIR"
              
              echo "Running Camlp5 test suite on Unix v3..."
              cd "$CAMLP5_DIR/testsuite"
              
              echo "===== BEGIN TEST OUTPUT ====="
              make -k all-tests || echo "Tests completed with some errors, but continuing build"
              echo "===== END TEST OUTPUT ====="
            else
              echo "Camlp5 testsuite directory not found"
              echo "Skipping tests for Unix v3"
            fi
          else
            echo "Skipping Camlp5 tests for v2 environments (focusing on v3 for now)"
          fi
        shell: bash
        continue-on-error: true

      - name: Configure
        run: opam exec -- ocaml ./configure.ml --sosa-zarith

      - name: Build Geneweb
        run: opam exec -- make ${{ env.FMT_CI == 'true' && 'fmt ci' || 'build' }} distrib

      - name: "Test Geneweb daemon with --cache-in-memory"
        if: ${{ runner.os != 'Windows' }}
        run: |
          output=$(distribution/gw/gwd -cache-in-memory testing 2>&1)
          if echo "$output" | grep -q "Caching database testing in memory"; then
            echo "Caching message found, test passed."
            exit 0
          else
            echo "Caching message not found, test failed."
            exit 1
          fi

      - name: Collect Build Metrics
        id: collect-metrics
        uses: ./.github/actions/ci-utils
        with:
          command: collect-metrics
          os: ${{ matrix.os }}
          ocaml-version: ${{ matrix.ocaml-compiler }}
          cache-hit: ${{ runner.os != 'Windows' && steps.cache-opam-unix.outputs.cache-hit || steps.cache-opam-windows.outputs.cache-hit }}

  build-results:
    needs: [build]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Generate Build Summary
        uses: ./.github/actions/ci-utils
        with:
          command: generate-summary
          total-builds: ${{ needs.build.outputs.total_matrix_jobs }}
