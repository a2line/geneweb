name: GeneWeb CI
on:
  workflow_dispatch:
  pull_request:
    branches:
      - master
    paths-ignore:
      - 'etc/**'
      - 'hd/**'
      - 'man/**'
      - '**/*.md'
      - 'geneweb_colab.ipynb'
      - 'ICHANGES'
      - 'INSTALL'
      - 'LICENSE'
      - 'CHANGES'
      - '.gitattributes'
      - '.gitignore'
      - '.git-blame-ignore-revs'
      - '.ocamlformat'
      - '.ocamlformat-ignore'
      - 'geneweb.iss'
      - 'geneweb.opam.template'
  push:
    branches:
      - master
    paths-ignore:
      - 'etc/**'
      - 'hd/**'
      - 'man/**'
      - '**/*.md'
      - 'geneweb_colab.ipynb'
      - 'ICHANGES'
      - 'INSTALL'
      - 'LICENSE'
      - 'CHANGES'
      - '.gitattributes'
      - '.gitignore'
      - '.git-blame-ignore-revs'
      - '.ocamlformat'
      - '.ocamlformat-ignore'
      - 'geneweb.iss'
      - 'geneweb.opam.template'

env:
  OPAMYES: true

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-24.04, macos-15, windows-latest]
        ocaml-compiler: [4.14.2, 5.3.0]
        setup-version: [v3]
        include:
          - os: ubuntu-22.04
            ocaml-compiler: 4.08.1
            setup-version: v2
          - os: macos-13
            ocaml-compiler: 4.08.1
            setup-version: v2
          - os: windows-latest
            ocaml-compiler: 4.08.1
            setup-version: v2

    outputs:
      total_matrix_jobs: ${{ strategy.job-total || 0 }}
      metric: ${{ steps.collect-metrics.outputs.metric }}

    env:
      FMT_CI: ${{ matrix.os == 'ubuntu-24.04' && matrix.ocaml-compiler == '4.14.2' && matrix.setup-version == 'v3' }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Start Build Timer
        uses: ./.github/actions/ci-utils
        with:
          command: start-timer

      - name: Cache Opam dependencies (Unix)
        id: cache-opam-unix
        if: runner.os != 'Windows'
        uses: actions/cache@v4
        with:
          path: ~/.opam
          key: unix-${{ matrix.ocaml-compiler }}-${{ env.FMT_CI == 'true' && 'with-test' || 'no-test' }}-${{ matrix.setup-version }}-${{ hashFiles('*.opam') }}-cache
          restore-keys: unix-${{ matrix.ocaml-compiler }}-${{ env.FMT_CI == 'true' && 'with-test' || 'no-test' }}-${{ matrix.setup-version }}

      - name: Cache Opam dependencies (Windows)
        id: cache-opam-windows
        if: runner.os == 'Windows'
        uses: actions/cache@v4
        with:
          path: D:\.opam
          key: windows-${{ matrix.ocaml-compiler }}-${{ env.FMT_CI == 'true' && 'with-test' || 'no-test' }}-${{ matrix.setup-version }}-${{ hashFiles('*.opam') }}-cache
          restore-keys: windows-${{ matrix.ocaml-compiler }}-${{ env.FMT_CI == 'true' && 'with-test' || 'no-test' }}-${{ matrix.setup-version }}

      - name: Setup Ocaml with v2
        if: matrix.setup-version == 'v2'
        uses: ocaml/setup-ocaml@v2
        with:
          ocaml-compiler: ${{ matrix.ocaml-compiler }}
          
      - name: Setup Ocaml with v3
        if: matrix.setup-version == 'v3'
        uses: ocaml/setup-ocaml@v3
        with:
          ocaml-compiler: ${{ matrix.ocaml-compiler }}

      - name: Pin camlp5 and not-ocamlfind without installing
        if: matrix.setup-version == 'v3'
        run: |
          opam pin add --no-action camlp5 https://github.com/camlp5/camlp5.git
          opam pin add --no-action not-ocamlfind https://github.com/chetmurthy/not-ocamlfind.git
          opam install pcre2

      - name: Install Geneweb dependencies
        run: opam install . --deps-only ${{ env.FMT_CI == 'true' && '--with-test' || '' }}

      - name: Install ancient dependency for Unix
        if: ${{ runner.os != 'Windows' }}
        run: opam pin ancient -y https://github.com/OCamlPro/ocaml-ancient.git

      - name: Run Camlp5 test suite
        run: |
          # Ensure OPAM environment is properly set up
          echo "Setting up OPAM environment..."
          eval $(opam env)
          
          echo "==== Environment Info ===="
          echo "OCaml version: $(ocaml -version)"
          echo "OPAM version: $(opam --version)"
          echo "OPAM switch: $(opam switch show)"
          echo "OS: $RUNNER_OS"
          echo "Setup version: ${{ matrix.setup-version }}"
          echo "=========================="
          
          # Fix PATH for Windows v2
          if [ "$RUNNER_OS" == "Windows" ] && [ "${{ matrix.setup-version }}" == "v2" ]; then
            echo "Setting up Windows v2 environment specifics..."
            export PATH="$OPAM_SWITCH_PREFIX/bin:$PATH"
            echo "Updated PATH: $PATH"
          fi
          
          # WINDOWS-SPECIFIC APPROACH
          if [ "$RUNNER_OS" == "Windows" ]; then
            echo "===== WINDOWS PATH DETECTION ====="
            
            # Check for ocamlfind
            which ocamlfind || echo "WARNING: ocamlfind not found in PATH"
            
            # Try multiple paths for v2/v3 compatibility
            SEARCH_PATHS=(
              "D:/a/geneweb/geneweb/_opam/.opam-switch/build"
              "D:/a/geneweb/geneweb/_opam/.opam-switch/sources"
              "D:/a/geneweb/geneweb/_opam/lib"
            )
            
            echo "Searching for Camlp5 in multiple locations..."
            CAMLP5_BUILD_DIR=""
            
            for path in "${SEARCH_PATHS[@]}"; do
              echo "Checking $path"
              if [ -d "$path" ]; then
                echo "  Directory exists, searching for camlp5.*"
                CANDIDATES=$(find "$path" -type d -name "camlp5*" 2>/dev/null | sort -V)
                if [ -n "$CANDIDATES" ]; then
                  echo "  Found candidates:"
                  echo "$CANDIDATES"
                  
                  # First check for directories with testsuite
                  for dir in $CANDIDATES; do
                    if [ -d "$dir/testsuite" ]; then
                      CAMLP5_BUILD_DIR="$dir"
                      echo "  Found directory with testsuite: $CAMLP5_BUILD_DIR"
                      break 2  # Break out of both loops
                    fi
                  done
                  
                  # If no directory with testsuite found, take the last one
                  if [ -z "$CAMLP5_BUILD_DIR" ]; then
                    CAMLP5_BUILD_DIR=$(echo "$CANDIDATES" | tail -n 1)
                    echo "  No directory with testsuite found, using: $CAMLP5_BUILD_DIR"
                  fi
                fi
              else
                echo "  Directory doesn't exist"
              fi
            done
            
            if [ -d "$CAMLP5_BUILD_DIR" ]; then
              echo "Camlp5 directory exists: YES"
              echo "Contents of $CAMLP5_BUILD_DIR:"
              ls -la "$CAMLP5_BUILD_DIR" || echo "Failed to list directory"
              
              if [ -d "$CAMLP5_BUILD_DIR/testsuite" ]; then
                echo "Testsuite subdirectory exists: YES"
                echo "Running Camlp5 test suite on Windows..."
                echo "Changing to directory: $CAMLP5_BUILD_DIR/testsuite"
                cd "$CAMLP5_BUILD_DIR/testsuite"
                
                echo "Current directory: $(pwd)"
                echo "Directory contents:"
                ls -la
                
                # For v2, we might need to install dependencies
                if [ "${{ matrix.setup-version }}" == "v2" ]; then
                  echo "Installing test dependencies for v2..."
                  opam install -y rresult fmt pcre ounit2 || echo "Failed to install dependencies, continuing anyway"
                fi
                
                echo "===== BEGIN TEST OUTPUT ====="
                make all-tests || echo "Tests completed with some errors, but continuing build"
                echo "===== END TEST OUTPUT ====="
              else
                echo "Testsuite subdirectory exists: NO"
                echo "Skipping tests for Windows"
              fi
            else
              echo "Camlp5 directory exists: NO"
              echo "Could not find Camlp5 directory on Windows"
              echo "Available Camlp5 directories from full search:"
              find "D:\a\geneweb\geneweb\_opam" -name "camlp5*" -type d 2>/dev/null || echo "No camlp5 directories found"
              echo "Skipping Camlp5 tests on Windows"
            fi
          # UNIX APPROACH (keep what's working)
          else
            echo "===== UNIX PATH DETECTION ====="
            
            # Check for ocamlfind
            which ocamlfind || echo "WARNING: ocamlfind not found in PATH"
            
            # Get OPAM prefix
            OPAM_PREFIX=$(opam var prefix)
            echo "OPAM prefix: $OPAM_PREFIX"
            
            # Try multiple paths for v2/v3 compatibility
            SEARCH_PATHS=(
              "$OPAM_PREFIX/.opam-switch/build"
              "$OPAM_PREFIX/.opam-switch/sources"
              "$OPAM_PREFIX/lib"
            )
            
            echo "Searching for Camlp5 in multiple locations..."
            CAMLP5_DIR=""
            
            for path in "${SEARCH_PATHS[@]}"; do
              echo "Checking $path"
              if [ -d "$path" ]; then
                echo "  Directory exists, searching for camlp5.*"
                CANDIDATES=$(find "$path" -type d -name "camlp5*" 2>/dev/null | sort -V)
                if [ -n "$CANDIDATES" ]; then
                  echo "  Found candidates:"
                  echo "$CANDIDATES"
                  
                  # First check for directories with testsuite
                  for dir in $CANDIDATES; do
                    if [ -d "$dir/testsuite" ]; then
                      CAMLP5_DIR="$dir"
                      echo "  Found directory with testsuite: $CAMLP5_DIR"
                      break 2  # Break out of both loops
                    fi
                  done
                  
                  # If no directory with testsuite found, take the last one
                  if [ -z "$CAMLP5_DIR" ]; then
                    CAMLP5_DIR=$(echo "$CANDIDATES" | tail -n 1)
                    echo "  No directory with testsuite found, using: $CAMLP5_DIR"
                  fi
                fi
              else
                echo "  Directory doesn't exist"
              fi
            done
            
            if [ -d "$CAMLP5_DIR" ]; then
              echo "Camlp5 directory exists: YES"
              echo "Contents of $CAMLP5_DIR:"
              ls -la "$CAMLP5_DIR" || echo "Failed to list directory"
              
              if [ -d "$CAMLP5_DIR/testsuite" ]; then
                echo "Testsuite subdirectory exists: YES"
                echo "Running Camlp5 test suite on Unix..."
                echo "Changing to directory: $CAMLP5_DIR/testsuite"
                cd "$CAMLP5_DIR/testsuite"
                
                echo "Current directory: $(pwd)"
                echo "Directory contents:"
                ls -la
                
                # For v2, we might need to install dependencies
                if [ "${{ matrix.setup-version }}" == "v2" ]; then
                  echo "Installing test dependencies for v2..."
                  opam install -y rresult fmt pcre ounit2 || echo "Failed to install dependencies, continuing anyway"
                fi
                
                echo "===== BEGIN TEST OUTPUT ====="
                make all-tests || echo "Tests completed with some errors, but continuing build"
                echo "===== END TEST OUTPUT ====="
              else
                echo "Testsuite subdirectory exists: NO"
                echo "Skipping tests for Unix"
              fi
            else
              echo "Camlp5 directory exists: NO"
              echo "Could not find Camlp5 directory on Unix"
              echo "Available Camlp5 directories from full search:"
              find "$OPAM_PREFIX" -name "camlp5*" -type d 2>/dev/null || echo "No camlp5 directories found" 
              echo "Skipping Camlp5 tests on Unix"
            fi
          fi
        shell: bash

      - name: Configure
        run: opam exec -- ocaml ./configure.ml --sosa-zarith

      - name: Build Geneweb
        run: opam exec -- make ${{ env.FMT_CI == 'true' && 'fmt ci' || 'build' }} distrib

      - name: "Test Geneweb daemon with --cache-in-memory"
        if: ${{ runner.os != 'Windows' }}
        run: |
          output=$(distribution/gw/gwd -cache-in-memory testing 2>&1)
          if echo "$output" | grep -q "Caching database testing in memory"; then
            echo "Caching message found, test passed."
            exit 0
          else
            echo "Caching message not found, test failed."
            exit 1
          fi

      - name: Collect Build Metrics
        id: collect-metrics
        uses: ./.github/actions/ci-utils
        with:
          command: collect-metrics
          os: ${{ matrix.os }}
          ocaml-version: ${{ matrix.ocaml-compiler }}
          cache-hit: ${{ runner.os != 'Windows' && steps.cache-opam-unix.outputs.cache-hit || steps.cache-opam-windows.outputs.cache-hit }}

  build-results:
    needs: [build]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Generate Build Summary
        uses: ./.github/actions/ci-utils
        with:
          command: generate-summary
          total-builds: ${{ needs.build.outputs.total_matrix_jobs }}
