name: GeneWeb CI
on:
  workflow_dispatch:
  pull_request:
    branches:
      - master
    paths-ignore:
      - 'etc/**'
      - 'hd/**'
      - 'man/**'
      - '**/*.md'
      - 'geneweb_colab.ipynb'
      - 'ICHANGES'
      - 'INSTALL'
      - 'LICENSE'
      - 'CHANGES'
      - '.gitattributes'
      - '.gitignore'
      - '.git-blame-ignore-revs'
      - '.ocamlformat'
      - '.ocamlformat-ignore'
      - 'geneweb.iss'
      - 'geneweb.opam.template'
  push:
    branches:
      - master
    paths-ignore:
      - 'etc/**'
      - 'hd/**'
      - 'man/**'
      - '**/*.md'
      - 'geneweb_colab.ipynb'
      - 'ICHANGES'
      - 'INSTALL'
      - 'LICENSE'
      - 'CHANGES'
      - '.gitattributes'
      - '.gitignore'
      - '.git-blame-ignore-revs'
      - '.ocamlformat'
      - '.ocamlformat-ignore'
      - 'geneweb.iss'
      - 'geneweb.opam.template'

env:
  OPAMYES: true

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-24.04, macos-15, windows-latest]
        ocaml-compiler: [4.14.2, 5.3.0]
        setup-version: [v3]
#        include:
#          - os: ubuntu-22.04
#            ocaml-compiler: 4.08.1
#            setup-version: v2
#          - os: macos-13
#            ocaml-compiler: 4.08.1
#            setup-version: v2
#          - os: windows-latest
#            ocaml-compiler: 4.08.1
#            setup-version: v2

    outputs:
      total_matrix_jobs: ${{ strategy.job-total || 0 }}
      metric: ${{ steps.collect-metrics.outputs.metric }}

    env:
      FMT_CI: ${{ matrix.os == 'ubuntu-24.04' && matrix.ocaml-compiler == '4.14.2' && matrix.setup-version == 'v3' }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Start Build Timer
        uses: ./.github/actions/ci-utils
        with:
          command: start-timer

      - name: Setup Ocaml with v2
        if: matrix.setup-version == 'v2'
        uses: ocaml/setup-ocaml@v2
        with:
          ocaml-compiler: ${{ matrix.ocaml-compiler }}
          
      - name: Setup Ocaml with v3
        if: matrix.setup-version == 'v3'
        uses: ocaml/setup-ocaml@v3
        with:
          ocaml-compiler: ${{ matrix.ocaml-compiler }}

      - name: Pin ocamlfind fork/not-ocamlfind/camlp5/camlp5-buildscripts without installing
        if: matrix.setup-version == 'v3'
        run: |
          opam pin add --no-action ocamlfind https://github.com/chetmurthy/ocamlfind.git
          opam pin add --no-action not-ocamlfind https://github.com/chetmurthy/not-ocamlfind.git
          opam pin add --no-action camlp5-buildscripts https://github.com/camlp5/camlp5-buildscripts.git
          opam pin add --no-action camlp5 https://github.com/camlp5/camlp5.git

      - name: Install Geneweb dependencies
        run: |
          opam install . --deps-only ${{ env.FMT_CI == 'true' && '--with-test' || '' }}

      - name: Install ancient dependency for Unix
        if: ${{ runner.os != 'Windows' }}
        run: opam pin ancient https://github.com/OCamlPro/ocaml-ancient.git

      - name: Configure
        run: opam exec -- ocaml ./configure.ml --sosa-zarith

      - name: Build Geneweb
        run: opam exec -- make ${{ env.FMT_CI == 'true' && 'fmt ci' || 'build' }} distrib

      - name: "Test Geneweb daemon with --cache-in-memory"
        if: ${{ runner.os != 'Windows' }}
        run: |
          output=$(distribution/gw/gwd -cache-in-memory testing 2>&1)
          if echo "$output" | grep -q "Caching database testing in memory"; then
            echo "Caching message found, test passed."
            exit 0
          else
            echo "Caching message not found, test failed."
            exit 1
          fi

      - name: Collect Build Metrics
        id: collect-metrics
        uses: ./.github/actions/ci-utils
        with:
          command: collect-metrics
          os: ${{ matrix.os }}
          ocaml-version: ${{ matrix.ocaml-compiler }}
          cache-hit: ${{ runner.os != 'Windows' && steps.cache-opam-unix.outputs.cache-hit || steps.cache-opam-windows.outputs.cache-hit }}

  build-results:
    needs: [build]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Generate Build Summary
        uses: ./.github/actions/ci-utils
        with:
          command: generate-summary
          total-builds: ${{ needs.build.outputs.total_matrix_jobs }}
